import { List, Logger, ObjectFunction, Map } from './coreutil_v1.js';
import { ContainerDatabaseStorage } from './containerbridge_v1.js';

class IndexConfig {

    /**
     * 
     * @param {String} name 
     * @param {String} path 
     * @param {Boolean} unique 
     */
    constructor(name, path, unique) {

        /** @type {String} */
        this.name = name;

        /** @type {String} */
        this.path = path;

        /** @type {Boolean} */
        this.unique = unique;
    }

}

class StoreConfig {

    constructor() {

        /** @type {String} */
        this.storeName = null;

        /** @type {String} */
        this.keyPath = null;

        /** @type {List<IndexConfig>} */
        this.indexList = new List();

    }

    /**
     * 
     * @param {String} storeName 
     */
    withStoreName(storeName) {
        this.storeName = storeName;
        return this;
    }

    /**
     * 
     * @param {String} storeName 
     */
    withKeyPath(keyPath) {
        this.keyPath = keyPath;
        return this;
    }

    /**
     * 
     * @param {String} storeName 
     */
    withIndex(name, path, unique) {
        this.indexList.add(new IndexConfig(name, path, unique));
        return this;
    }

}

class DbConfig {


    constructor() {

        /** @type {Number} */
        this.version = 1;

        /** @type {List<StoreConfig} */
        this.storeConfigList = new List();
    }

    /**
     * 
     * @param {Number} version 
     */
     withVersion(version) {
        this.version = version;
        return this;
    }

    /**
     * 
     * @param {StoreConfig} storeConfig 
     */
    withStoreConfig(storeConfig) { 
        this.storeConfigList.add(storeConfig);
        return this;
    }


}

const LOG$1 = new Logger("StoreConfig");

class DBConfigurer {

    /**
     * 
     * @param {DbConfig} dbConfig 
     */
    constructor(dbConfig) {
        this.dbConfig = dbConfig;
    }

    /**
     * 
     * @param {IDBVersionChangeEvent} versionChangeEvent 
     */
    updgrade(versionChangeEvent) {
        LOG$1.info("Upgrade needed");

        /** @type {IDBDatabase} */
        const db = versionChangeEvent.target.result;

        this.dbConfig.storeConfigList.forEach((storeConfig) => {

            // Clear the old
            if (db.objectStoreNames.contains(storeConfig.storeName)) {
                db.deleteObjectStore(storeConfig.storeName);
            }
    
            // Create the new
            const store = db.createObjectStore(
                storeConfig.storeName, 
                { keyPath: storeConfig.keyPath }
            );
    
            storeConfig.indexList.forEach((indexConfig) => {
                const index = store.createIndex(
                    indexConfig.name, 
                    indexConfig.path, 
                    {unique: indexConfig.unique}
                );
                return true;
            });

            return true;
        });
    }

}

class SubscriptionManager {

    constructor() {
        this.putSubscribers = new List();
        this.deleteSubscribers = new List();
    }

    /**
     * Subscribers are weakly referenced. Keep a reference to the 
     * instance of the ObjectFunction to ensure it is not automatically
     * removed.
     * 
     * @param {ObjectFunction} putSubscriber 
     * @param {ObjectFunction} deleteSubscriber 
     */
    subscribe(putSubscriber, deleteSubscriber) {
        if (putSubscriber instanceof ObjectFunction) {
            this.putSubscribers.add(new WeakRef(putSubscriber));
        }
        if (deleteSubscriber instanceof ObjectFunction) {
            this.deleteSubscribers.add(new WeakRef(deleteSubscriber));
        }
    }

    notifyPut(entity) {
        let toRemoveArray = [];
        this.putSubscribers.forEach((weakRefSubscriber, parent) => {
            /** @type {ObjectFunction} */
            let subscriber = weakRefSubscriber.deref();
            if (!subscriber) {
                toRemoveArray.push(weakRefSubscriber);
            } else {
                subscriber.call(entity);
            }
            return true;
        }, this);
        new List(toRemoveArray).forEach((toRemove, parent) => {
            this.putSubscribers.remove(toRemove);
        });
    }

    notifyDelete(key) {
        let toRemoveArray = [];
        this.deleteSubscribers.forEach((weakRefSubscriber, parent) => {
            /** @type {ObjectFunction} */
            let subscriber = weakRefSubscriber.deref();
            if (!subscriber) {
                toRemoveArray.push(weakRefSubscriber);
            } else {
                subscriber.call(key);
            }
            return true;
        }, this);
        new List(toRemoveArray).forEach((toRemove, parent) => {
            this.deleteSubscribers.remove(toRemove);
        });
    }

}

/**
 * Manages a database with 0 to many stores
 */
class DBManager {

    /**
     * 
     * @param {IDBDatabase} db 
     */
    constructor(db) {
        
        /** @type {IDBDatabase} */
        this.db = db;

        /** @type {Map} */
        this.subscriptionManagerMap = new Map();
    }

    /**
     * 
     * @param {String} dbName 
     * @param {DbConfig} dbConfig 
     * @return {Promise}
     */
    static fromStore(dbName, dbConfig) {
        const dbConfigurer = new DBConfigurer(dbConfig);
        return new Promise((resolve, reject) => {
            const openRequest = ContainerDatabaseStorage.open(dbName, dbConfig.version);
            openRequest.onerror = (error) => {
                LOG.error(error);
                reject(error);
            };
            openRequest.onsuccess = () => {
                resolve(new DBManager(openRequest.result));
            };
            openRequest.onupgradeneeded = dbConfigurer.updgrade.bind(dbConfigurer);
        });
    }

    /**
     * @returns {Object}
     */
    static mapEntity(type, dataObject) {
        if (dataObject) {
            return Object.assign(new type, dataObject);
        }
        return null;
    }


    /**
     * 
     * @param {String} storeName 
     * @param {IDBTransactionMode} transactionType readwrite
     * @returns {IDBTransaction}
     */
    transaction(transactionType, storeName) {
        return this.db.transaction(storeName, transactionType);
    }

    /**
     * 
     * @param {IDBTransaction} transaction
     * @param {String} storeName
     * @returns {IDBOjectStore}
     */
    objectStore(transaction, storeName) {
        return transaction.objectStore(storeName);
    }

    /**
     * 
     * @param {IDBObjectStore} objectStore 
     * @param {String} indexName
     * @returns {IDBIndex}
     */
    index(objectStore, indexName) {
        return objectStore.index(indexName);
    }

    /**
     * @param {Object} entity
     * @param {String} storeName
     * @param {String} transactionType
     * @return {Promise}
     */
    putEntity(entity, storeName) {
        const transaction = this.transaction("readwrite", storeName);
        const store = transaction.objectStore(storeName);
        const putRequest = store.put(entity);
        const context = this;
        return new Promise((resolve, reject) => {
            putRequest.onsuccess = () => { context.notifyPut(entity, storeName); resolve(entity); };
            putRequest.onerror = (error) => { reject(error); };
        });
    }


        /**
     * 
     * @param {String} key 
     * @param {String} storeName
     * @param {Class} type
     * @returns {Promise}
     */
    getEntity(key, type, storeName) {
        const transaction = this.transaction("readonly", storeName);
        const userStore = transaction.objectStore(storeName);
        const getRequest = userStore.get(key);
        return new Promise((resolve, reject) => {
            getRequest.onsuccess = () => { resolve(DBManager.mapEntity(type, getRequest.result)); };
            getRequest.onerror = (error) => { reject(error); };
        });
    }

    /**
     * 
     * @param {String} key 
     * @returns {Promise}
     */
    deleteEntity(key, storeName) {
        const transaction = this.transaction("readwrite", storeName);
        const store = transaction.objectStore(storeName);
        const deleteRequest = store.delete(key);
        const context = this;
        return new Promise((resolve, reject) => {
            deleteRequest.onsuccess = () => {  context.notifyDelete(key, storeName); resolve(deleteRequest.result); };
            deleteRequest.onerror = (error) => {reject(error); };
        });
    }

    notifyDelete(key, storeName) {
        if (this.subscriptionManagerMap.contains(storeName)) {
            this.subscriptionManagerMap.get(storeName).notifyDelete(key);
        }
    }

    notifyPut(entity, storeName) {
        if (this.subscriptionManagerMap.contains(storeName)) {
            this.subscriptionManagerMap.get(storeName).notifyPut(entity);
        }
    }

    /**
     * Subscribers are weakly referenced. Keep a reference to the 
     * instance of the ObjectFunction to ensure it is not automatically
     * removed.
     * 
     * @type {String} storeName
     * @type {ObjectFunction} objectFunction
     */
    subscribePut(storeName, objectFunction) {
        if (!this.subscriptionManagerMap.contains(storeName)) {
            this.subscriptionManagerMap.set(storeName, new SubscriptionManager());
        }
        this.subscriptionManagerMap.get(storeName).subscribe(objectFunction);
    }

    /**
     * Subscribers are weakly referenced. Keep a reference to the 
     * instance of the ObjectFunction to ensure it is not automatically
     * removed.
     * 
     * @type {String} storeName
     * @type {ObjectFunction} putObjectFunction
     * @type {ObjectFunction} deleteObjectFunction
     */
    subscribe(putObjectFunction, deleteObjectFunction, storeName) {
        if (!this.subscriptionManagerMap.contains(storeName)) {
            this.subscriptionManagerMap.set(storeName, new SubscriptionManager());
        }
        this.subscriptionManagerMap.get(storeName).subscribe(putObjectFunction, deleteObjectFunction);
    }

}

export { DBConfigurer, DBManager, DbConfig, IndexConfig, StoreConfig, SubscriptionManager };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
